name: Destroy

on:
  workflow_dispatch:

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      AWS_ACCESS_KEY_ID: ${{ steps.ouput-iam-aws-access-key.outputs.out }}
      AWS_SECRET_ACCESS_KEY: ${{ steps.ouput-iam-aws-secret-key.outputs.out }}    
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v2
      - uses: actions/cache@v3
        with:
          path: |
            .terraform/**
            .terraform.lock.hcl
            plan.cache
          key: terraform-lock-${{ github.head_ref || github.ref_name }}
      - name: Import AWS Secrets
        id: import-aws-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: https://vault.apr.vee.codes
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
              aws/creds/vaultAction access_key | AWS_ACCESS_KEY_ID ;
              aws/creds/vaultAction secret_key | AWS_SECRET_ACCESS_KEY ; 

      - uses: cloudposse/github-action-secret-outputs@main
        id: ouput-iam-aws-access-key
        with:
          secret: ${{ secrets.VAULT_TOKEN }}
          op: encode
          in: ${{ env.AWS_ACCESS_KEY_ID }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: ouput-iam-aws-secret-key
        with:
          secret: ${{ secrets.VAULT_TOKEN }}
          op: encode
          in: ${{ env.AWS_SECRET_ACCESS_KEY }} 

      - name: Sleep
        run: sleep 10

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:  ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init 
        run: |
            cat main.tf 
            terraform init
            
  destroy:
    runs-on: ubuntu-latest
    needs: init
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
      - uses: actions/cache@v3
        with:
          path: |
            .terraform/**
            .terraform.lock.hcl
            plan.cache
          key: terraform-lock-${{ github.event.workflow_run.head_branch }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: ouput-iam-aws-access-key
        with:
          secret: ${{ secrets.VAULT_TOKEN }}
          op: decode
          in: ${{ needs.init.outputs.AWS_ACCESS_KEY_ID }}

      - uses: cloudposse/github-action-secret-outputs@main
        id: ouput-iam-aws-secret-key
        with:
          secret: ${{ secrets.VAULT_TOKEN }}
          op: decode
          in: ${{ needs.init.outputs.AWS_SECRET_ACCESS_KEY }}
  
      - name: Import GRAFANA_API_TOKEN Secret
        uses: hashicorp/vault-action@v2
        with:
          url: https://vault.apr.vee.codes
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
              secrets/data/environment-vault-impl-ref/actions/GRAFANA_API_TOKEN value | GRAFANA_API_TOKEN ;
              
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:  ${{ steps.ouput-iam-aws-access-key.outputs.out }}
          aws-secret-access-key: ${{ steps.ouput-iam-aws-secret-key.outputs.out }}
          aws-region: us-east-1

      - name: Terraform destroy 
        run: |
          terraform init
          terraform destroy -auto-approve

      #DELETE Dashboards on Grafana API
      - name: Delete Dashboards from project
        continue-on-error: true
        run: |
          TAG="cluster-vault-impl-ref"
          # Passo 1: Verificar se existem painéis com a tag específica
          response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "https://grafana.vkpr.platform.vee.codes/api/search?tag=${TAG}" -H "Authorization: Bearer ${{ env.GRAFANA_API_TOKEN }}")
          if [ "$response" -ne 200 ]; then
              echo "Não foram encontrados painéis com a tag '${TAG}'. Nenhum painel será excluído."
              exit 0
          fi
          # Passo 2: Obter lista de UIDs dos painéis com a tag específica
          panel_uids=$(curl -s -X GET "https://grafana.vkpr.platform.vee.codes/api/search?tag=${TAG}" -H "Authorization: Bearer ${{ env.GRAFANA_API_TOKEN }}" | jq -r '.[] | .uid')
          
          # Passo 3: Excluir cada painel obtido no passo 1
          for panel_uid in $panel_uids; do
              response=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE "https://grafana.vkpr.platform.vee.codes/api/dashboards/uid/${panel_uid}" -H "Authorization: Bearer ${{ env.GRAFANA_API_TOKEN }}")
              if [ "$response" -eq 200 ]; then
                  echo "Painel com ID ${panel_uid} excluído com sucesso."
              else
                  echo "Erro ao excluir o painel com UID ${panel_uid}. Status code: ${response}"
              fi
          done